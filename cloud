<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Tagcloud</title>
    <style>
        html, body{
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <style>
        #word-cloud{
            height: 100vh;
            width: 100vh;
            margin: 0 auto;
        }
    </style>
</head>
<body>
<div id="word-cloud"></div>
    <script>
        var config = {
            trace: true,
            spiralResolution: 1, //Lower = better resolution
            spiralLimit: 360 * 5,
            lineHeight: 0.8,
            xWordPadding: 4,
            yWordPadding: 3,
            font: "Helvetica"
        }

        var words = ["w", "are", "cool", "and", "so", "are", "you", "inconstituent", "funhouse!", "apart", "from", "Steve", "fish"].map(function(word) {
            return {
                word: word,
                freq: Math.floor(Math.random() * 50) + 10
            }
        })

        words.sort(function(a, b) {
            return -1 * (a.freq - b.freq);
        });

        var cloud = document.getElementById("word-cloud");
        cloud.style.position = "relative";
        cloud.style.fontFamily = config.font;

        colors = ['mediumslateblue', 'crimson', 'steelblue', 'darkcyan', 'mediumspringgreen', 'orange', 'red', 'dimgray']

        var startPoint = {
            x: cloud.offsetWidth / 2,
            y: cloud.offsetHeight / 2
        };

        var wordsDown = [];
        /* ======================= END SETUP ======================= */





        /* =======================  PLACEMENT FUNCTIONS =======================  */
        function createWordObject(word, freq) {
            var wordContainer = document.createElement("div");
            wordContainer.style.position = "absolute";
            wordContainer.style.fontSize = freq * +3 + "px";
            wordContainer.style.lineHeight = config.lineHeight;
            wordContainer.style.color = colors[Math.floor(Math.random() * colors.length)];
            /*    wordContainer.style.transform = "translateX(-50%) translateY(-50%)";*/
            wordContainer.appendChild(document.createTextNode(word));
            return wordContainer;
        }

        function placeWord(word, x, y) {

            cloud.appendChild(word);
            word.style.left = x - word.offsetWidth/2 + "px";
            word.style.top = y - word.offsetHeight/2 + "px";

            wordsDown.push(word.getBoundingClientRect());
        }



        function spiral(i, callback) {
            angle = config.spiralResolution * i;
            x = (1 + angle) * Math.cos(angle);
            y = (1 + angle) * Math.sin(angle);
            return callback ? callback() : null;
        }

        function intersect(word, x, y) {
            cloud.appendChild(word);

            word.style.left = x - word.offsetWidth/2 + "px";
            word.style.top = y - word.offsetHeight/2 + "px";

            var currentWord = word.getBoundingClientRect();

            cloud.removeChild(word);

            for(var i = 0; i < wordsDown.length; i+=1){
                var comparisonWord = wordsDown[i];

                if(!(currentWord.right + config.xWordPadding < comparisonWord.left - config.xWordPadding ||
                    currentWord.left - config.xWordPadding > comparisonWord.right + config.wXordPadding ||
                    currentWord.bottom + config.yWordPadding < comparisonWord.top - config.yWordPadding ||
                    currentWord.top - config.yWordPadding > comparisonWord.bottom + config.yWordPadding)){

                    return true;
                }
            }

            return false;
        }

        foll
        /* =======================  END PLACEMENT FUNCTIONS =======================  */





        /* =======================  LETS GO! =======================  */
        (function placeWords() {
            for (var i = 0; i < words.length; i += 1) {

                var word = createWordObject(words[i].word, words[i].freq);

                for (var j = 0; j < config.spiralLimit; j++) {
                    //If the spiral function returns true, we've placed the word down and can break from the j loop
                    if (spiral(j, function() {
                        if (!intersect(word, startPoint.x + x, startPoint.y + y)) {
                            placeWord(word, startPoint.x + x, startPoint.y + y);
                            return true;
                        }
                    })) {
                        break;
                    }
                }
            }
        })();
        /* ======================= WHEW. THAT WAS FUN. We should do that again sometime ... ======================= */



        /* =======================  Draw the placement spiral if trace lines is on ======================= */
        (function traceSpiral() {

            traceCanvasCtx.beginPath();

            if (config.trace) {
                var frame = 1;

                function animate() {
                    spiral(frame, function() {
                        trace(startPoint.x + x, startPoint.y + y);
                    });

                    frame += 1;

                    if (frame < config.spiralLimit) {
                        window.requestAnimationFrame(animate);
                    }
                }

                animate();
            }
        })();
    </script>
</body>
</html>
